#!/usr/bin/env python
'''
Autogenerated code using arya
Original Object Document Input: 
{"vnsFolderInst":{"attributes":{"dn":"uni/tn-F5-demo/ap-Web/epg-SLB-Web-servers/FI_C-WebServices-G-HTTP_LB-F-ADC-N-LTM/FI_C-WebServices-G-HTTP_LB-F-ADC-N-WebServers/FI_C-WebServices-G-HTTP_LB-F-ADC-N-S3","ctrctNameOrLbl":"WebServices","graphNameOrLbl":"HTTP_LB","nodeNameOrLbl":"ADC","name":"S3","key":"Member","status":"created,modified"},"children":[]}}


raise RuntimeError('Please review the auto generated code before ' +
                    'executing the output. Some placeholders will ' +
                    'need to be changed')
'''

# list of packages that should be imported for this code to work
import cobra.mit.access
import cobra.mit.request
import cobra.mit.session
import cobra.model.fv
import cobra.model.pol
import cobra.model.vns
from cobra.internal.codec.xmlcodec import toXMLStr
import sys

# Get CLI arguments
if (len(sys.argv) != 4):
	print "I need 3 arguments: url, user and password"
	sys.exit(0)
else:
	# Get arguments
	apic_url = sys.argv[1]
	apic_usr = sys.argv[2]
	apic_pwd = sys.argv[3]

# log into an APIC and create a directory object
ls = cobra.mit.session.LoginSession(apic_url, apic_usr, apic_pwd)
md = cobra.mit.access.MoDirectory(ls)
md.login()

# Constants
aclName      = u'access-list-inbound'
tenantName   = u'SiriusCyber'
ANPName      = u'Sirius-App1'
EPGName      = u'Tier1'
SGName       = u'Sirius-FE-SGT'
nodeName     = u'N1'
contractName = u'out-to-app1'

# the top level object on which operations will be made
polUni = cobra.model.pol.Uni('')
fvTenant = cobra.model.fv.Tenant(polUni, tenantName)
fvAp = cobra.model.fv.Ap(fvTenant, ANPName)
fvAEPg = cobra.model.fv.AEPg(fvAp, EPGName)

acls = md.lookupByClass("vnsFolderInst", parentDn=fvAEPg.dn)

print "<table width='100%%' id='acltable'>"
print "  <thead><tr><th align='left'>Delete?</th><th>Order</th><th>Name</th><th>Protocol</th><th>Port</th></tr></thead>"

for acl in acls:
	if acl.key and acl.name:
		if acl.key == 'AccessList' and acl.name == aclName:
			#print acl.name
			aces = md.lookupByClass("vnsFolderInst", parentDn=acl.dn)
			for ace in aces:
				if ace.name and ace.key:
					if ace.key == 'AccessControlEntry':
						folders = md.lookupByClass("vnsFolderInst", parentDn=ace.dn)
						params = md.lookupByClass("vnsParamInst", parentDn=ace.dn)
						for param in params:
							if param.key == 'action':
								action = param.value
							elif param.key == 'order':
								order = param.value
						for folder in folders:
							params = md.lookupByClass("vnsParamInst", parentDn=folder.dn)
							if folder.key == 'source_address':
								for param in params:
									if param.value:
										srcAdd = param.value								
							if folder.key == 'destination_address':
								for param in params:
									if param.value:
										dstAdd = param.value								                                               protocol = ''
							if folder.key == 'protocol':
								for param in params:
									if param.value:
										protocol = param.value								
                                                        operator = ''
                                                        port = ''
							if folder.key == 'destination_service':
								for param in params:
									if param.key == 'operator':
										operator = param.value								
									elif param.key == 'low_port':
										port = param.value

							
						#print " - %s (%s): %s %s %s %s %s %s" % (ace.name, order, action, protocol, srcAdd, dstAdd, operator, port)
						print "  <tr><td><input type='radio' name='rules' value='%s'></td><td align='center'>%s</td><td align='center'>%s</td><td align='center'>%s</td><td align='center'>%s</td></tr>" % (ace.name, order, ace.name, protocol, port)
print "</table>"
